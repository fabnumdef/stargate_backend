extend type Campus {
    getRequest(id: String!): Request
}

extend type CampusMutation {
    createRequest(request: RequestInput!): Request!
    editRequest(id: String!, request: RequestInput!): Request!
    mutateRequest(id: String!): RequestMutation!
}

type RequestMutation {
    addVisitor(visitor: RequestVisitorInput!): RequestVisitor!
    deleteVisitor(id: String!): RequestVisitor!
}

type RequestsList implements OffsetPaginator {
    meta: OffsetPaginatorMeta!
    list: [Request]!
}

input RequestFilters {
    from: DateTime
    to: DateTime
}

enum RequestObject {
    PRIVATE
    PROFESSIONAL
}

input RequestIdentityDocumentInput {
    kind: String
    reference: String
}

input RequestVisitorInput {
    nid: String
    firstname: String!
    birthLastname: String!
    usageLastname: String!
    rank: String
    company: String
    email: String!
    vip: Boolean
    vipReason: String
    nationality: String!
    identityDocuments: [RequestIdentityDocumentInput]
    birthday: DateTime!
    birthplace: String!
}

input RequestInput {
    object: RequestObject
    reason: String
    from: DateTime
    to: DateTime
    # List of IDs of places where we request access
    places: [String]
}

type RequestStateContext {
    string: String
}

type RequestState {
    context: RequestStateContext
}

type RequestIdentityDocument {
    kind: String
    reference: String
}

type RequestVisitor {
    id: String
    nid: String
    firstname: String!
    birthLastname: String!
    usageLastname: String!
    isInternal: Boolean!
    rank: String
    company: String
    email: String!
    vip: Boolean
    vipReason: String
    nationality: String!
    identityDocuments: [RequestIdentityDocument]
    birthday: DateTime!
    birthplace: String!
}

type Request implements Node {
    # Unique id of the request
    id: String!
    # Date of creation
    createdAt: DateTime!
    # Revision datetime to avoid collisions on edition
    updatedAt: DateTime!
    object: String!
    reason: String!
    from: DateTime!
    to: DateTime!
    # List of visitors
    visitors: [RequestVisitor]!
    # List of places to be visited
    places: [Place]!
}
