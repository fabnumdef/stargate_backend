extend type Request {
    listVisitors(cursor: OffsetCursor, filters: RequestVisitorFilters): RequestVisitorsList!
    getVisitor(id: String!): RequestVisitor
}

input ValidationPersonas {
    role: String,
    unit: String,
}

type RequestMutation {
    createVisitor(visitor: RequestVisitorInput!): RequestVisitor!
    editVisitor(visitor: RequestVisitorInput!, id: String!): RequestVisitor!
    deleteVisitor(id: String!): RequestVisitor!
    shiftVisitor(id: String!, as: ValidationPersonas!, transition: String!): RequestVisitor!
}

type RequestVisitorsList implements OffsetPaginator {
    meta: OffsetPaginatorMeta!
    list: [RequestVisitor]!
}

input RequestVisitorFilters {
    firstname: String
}

input RequestIdentityDocumentInput {
    kind: String
    reference: String
}

input RequestVisitorInput {
    nid: String
    firstname: String!
    birthLastname: String!
    usageLastname: String!
    isInternal: Boolean!
    rank: String
    company: String
    email: String!
    vip: Boolean
    vipReason: String
    nationality: String!
    identityDocuments: [RequestIdentityDocumentInput]
    birthday: DateTime!
    birthplace: String!
}

type RequestIdentityDocument {
    kind: String
    reference: String
}

type UnitStepStatus {
    step: String
    role: String
    behavior: String
    status: String
    done: Boolean
}

type UnitStatus {
    unitId: String!
    label: String!
    steps: [UnitStepStatus]!
}

type RequestVisitor {
    id: String
    nid: String
    firstname: String!
    birthLastname: String!
    usageLastname: String!
    isInternal: Boolean!
    rank: String
    company: String
    email: String!
    vip: Boolean
    vipReason: String
    nationality: String!
    identityDocuments: [RequestIdentityDocument]
    birthday: DateTime!
    birthplace: String!
    status: [UnitStatus]!
}
