extend type Campus {
    # List all visitors of a campus
    listVisitors(cursor: OffsetCursor, filters: RequestVisitorFilters, search: String, isDone: RequestVisitorIsDone, requestsId: [String]): RequestVisitorsList!
    listVisitorsToValidate(cursor: OffsetCursor, filters: RequestVisitorFilters, search: String, as: ValidationPersonas): RequestVisitorsToValidateList!
    listRequestByVisitorStatus(cursor: OffsetCursor, filters: RequestVisitorFilters, as: ValidationPersonas!, isDone: RequestVisitorIsDone!): RequestsListGroupByVisitors!
}

extend type Request {
    # List all visitors of a request
    listVisitors(cursor: OffsetCursor, filters: RequestVisitorFilters, search: String, isDone: RequestVisitorIsDone): RequestVisitorsList!
    # Get visitor
    getVisitor(id: ObjectID!): RequestVisitor
}

#Personas is an object to have a more verbose behavior when user has many roles
input ValidationPersonas {
    # Role of the personas
    role: Role,
    # Unit of the personas
    unit: String,
}

input RequestVisitorIsDone {
    role: String
    value: Boolean!
}

type RequestMutation {
    # Create a visitor
    createVisitor(visitor: RequestVisitorInput!, as: ValidationPersonas!): RequestVisitor!
    # Edit a visitor
    editVisitor(visitor: RequestVisitorInput!, id: ObjectID!): RequestVisitor!
    # Delete a visitor
    deleteVisitor(id: ObjectID!): RequestVisitor!
    # Cancel a visitor
    cancelVisitor(id: ObjectID!): RequestVisitor!
    validateVisitorStep(id: ObjectID!, as: ValidationPersonas!, decision: String!, tags: [String]): RequestVisitor!
}

type RequestVisitorsList implements OffsetPaginator {
    # Generate a link to export list without pagination as a CSV file
    generateCSVExportLink(options: CSVExportOptions): ExportLink!
    # Metadata linked to the query
    meta: OffsetPaginatorMeta!
    # The list of visitors
    list: [RequestVisitor]!
}

type RequestVisitorsToValidateList {
    list: [RequestVisitor]!
    meta: OffsetPaginatorMeta!
}

type RequestsListGroupByVisitors {
    # The list of requests
    list: [RequestGroupByVisitor]
    # Metadata linked to the query
    meta: OffsetPaginatorMeta!
}

type RequestGroupByVisitor {
    # Unique id of a request
    id: String
    # Datas of the request
    requestData: [Request]
    # List of visitors
    visitors: [RequestVisitor]
}

# Filterable fields of a visitor
input RequestVisitorFilters {
    # Firstname
    firstname: String
    status: String
}

# Types of identity documents
enum IdentityDocumentType {
    # National identity card
    IDCard
    # International passport
    Passport
    # French military identity card
    CIMSCard
}

# Identity document information
input RequestIdentityDocumentInput {
    # Kind of document
    kind: IdentityDocumentType
    # Ref of the document
    reference: String
    file: identityFileInput
}

# Type of visitor when he's an employee
enum VisitorEmployeeType {
    TYPE_VISITOR
    TYPE_SUBCONTRACTOR
    TYPE_INTERIM
    TYPE_TRAINEE
    TYPE_DELIVERER
    TYPE_ACTIVE_MILITARY
    TYPE_RESERVIST
    TYPE_CIVILIAN_DEFENSE
    TYPE_FAMILY
    TYPE_AUTHORITY
}

input RequestVisitorInput {
    # Internal identity id
    nid: String
    # Firstname
    firstname: String!
    # Lastname, at the moment of birth (before union)
    birthLastname: String!
    # Lastname, at the current moment (maybe after union)
    usageLastname: String
    # Is it a military related people ?
    isInternal: Boolean!
    # Type of employee
    employeeType: VisitorEmployeeType!
    # Rank
    rank: String
    # Company
    company: String
    # Email of the visitor
    email: String!
    # Is it a VIP people ?
    vip: Boolean
    # Why is it a VIP people ?
    vipReason: String
    # Nationality
    nationality: String!
    # Identity documents
    identityDocuments: [RequestIdentityDocumentInput]
    # Data of an uploaded file from Front
    file: Upload
    # Birthday date
    birthday: DateTime!
    # Birth location
    birthplace: String!
}

type RequestIdentityDocument {
    kind: String
    reference: String
    file: identityFile
}

type identityFile {
    id: ID
}

input identityFileInput {
    id: ID
    filename: String
    original: String
}

type UnitStepStatus {
    step: String
    role: Role
    behavior: String
    status: String
    tags: [String]
    date: DateTime
    done: Boolean
}

type RequestVisitorUnitsStepsState {
    value: String,
    isOK: Boolean,
    date: DateTime,
    tags: [String],
}

type RequestVisitorUnitsSteps {
    role: String
    behavior: String
    state: RequestVisitorUnitsStepsState
}

type RequestVisitorUnits {
    id: String!
    label: String
    steps: [RequestVisitorUnitsSteps]
}

type RequestVisitor {
    id: ObjectID
    nid: String
    firstname: String!
    birthLastname: String!
    usageLastname: String
    isInternal: Boolean!
    employeeType: VisitorEmployeeType
    rank: String
    company: String
    email: String!
    vip: Boolean
    vipReason: String
    nationality: String!
    identityDocuments: [RequestIdentityDocument]
    birthday: DateTime!
    birthplace: String!
    status: String!
    units: [RequestVisitorUnits]
    request: Request
    generateIdentityFileExportLink: ExportLink
}
