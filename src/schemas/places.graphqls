extend type Campus {
    # List all places on a campus
    listPlaces(cursor: OffsetCursor, filters: PlaceFilters, hasUnit: HasUnitFilter): PlacesList!
    # Get Place on a campus
    getPlace(id: ObjectID!): Place
}

extend type CampusMutation {
    # Create place on a campus
    createPlace(place: PlaceInput!): Place!
    # Edit place on a campus
    editPlace(id: ObjectID!, place: PlaceInput!): Place!
    # Remove a place on a campus
    deletePlace(id: ObjectID!): Place!
}

# Object related to the places list
type PlacesList implements OffsetPaginator {
    # Metadata linked to the query
    meta: OffsetPaginatorMeta!
    # The list of places
    list: [Place]!
}

input PlacesSort {
    label: String
}

# Available filters for places
input PlaceFilters {
    # Label should be identical to
    label: String
    # unitInCharge should match
    unitInCharge: UnitInChargeFilters
}

input HasUnitFilter {
    id: String!
}

# Customizable information on place creation/edition
input PlaceInput {
    # Label, the human readable part
    label: String
    # ID of the unit in charge of this place

    unitInCharge: UnitInChargeFilters
}

# Used in PlaceFilters
input UnitInChargeFilters {
    # Id of the unit in charge
    id: ObjectID
    # Human readable label
    label: String
}

# Fragment of Unit, please see Unit Object
type UnitInCharge {
    # Unique ID of the Unit
    id: ObjectID
    # Human readable label
    label: String
}

# A place is a geographic element linked to a campus
type Place implements Node {
    # Unique id of the place
    id: ObjectID!
    # Date of creation
    createdAt: DateTime!
    # Revision datetime to avoid collisions on edition
    updatedAt: DateTime!
    # Label of the place
    label: String
    # Label of unit in charge of this place
    unitInCharge: UnitInCharge
}
